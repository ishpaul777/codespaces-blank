version: '3.7'

services:
  ###########################################################################
  #######                  DB SERVICES                                #######
  ###########################################################################
  postgres:
    image: postgres:14.2-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./server/pg-init-scripts:/docker-entrypoint-initdb.d
      - ./volumes/postgresql:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=tagore,kavach,kratos,keto
    healthcheck: 
      interval: 10s
      retries: 10
      test: "pg_isready -U \"$$POSTGRES_USER\" -d \"kavach\""
      timeout: 2s      
    networks:
      - tagore

  ###########################################################################
  #######                  APP SERVICES                               #######
  ###########################################################################
  tagore-migrate:
    build:
      context: ./server
      dockerfile: Dockerfile.migrate
    depends_on: 
      postgres:
        condition: service_healthy
    environment:
      - WAIT_HOSTS=postgres:5432
    volumes:
      - ./server:/app
    networks:
      - tagore


  tagore-server:
    build: 
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./server:/app
      - ./server/modelData:/app/modelData
    depends_on: 
      - tagore-migrate
    networks:
      - tagore


  tagore-web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    environment:
      - PUBLIC_URL=http://127.0.0.1:4455/.factly/tagore/web
      - REACT_APP_PUBLIC_URL=/.factly/tagore/web
      - REACT_APP_TAGORE_API_URL=http://localhost:8080
      - REACT_APP_COMPANION_URL=http://localhost:3020
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
    restart: unless-stopped
    stdin_open: true
    networks:
      - tagore 
      
  #########################################################################
  #####                        MINIO                                #######
  #########################################################################
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9002:9002"
    volumes:
      - ./volumes/minio/data:/export
      - ./volumes/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=miniokey
      - MINIO_SECRET_KEY=miniosecret
    networks:
      - tagore
    command: server -console-address :9002 /export

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    networks:
      - tagore
    entrypoint: >
      /bin/sh -c " apk add --no-cache bash; wait-for-it.sh minio:9000 -- echo 'Minio is up. Creating the bucket!!'; /usr/bin/mc config host add myminio http://minio:9000 miniokey miniosecret; /usr/bin/mc mb myminio/tagore; /usr/bin/mc anonymous set public myminio/tagore; exit 0; "
  ###########################################################################
  #######             UPLOAD SERVICES                                 #######
  ###########################################################################
  companion:
    image: transloadit/companion
    ports:
      - "3020:3020"
    env_file:
      - ./companion/.env
               
networks:
  tagore:
