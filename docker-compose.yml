version: '3.7'

services:
  ###########################################################################
  #######                  DB SERVICES                                #######
  ###########################################################################
  postgres:
    image: postgres:14.2-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - ./volumes/postgresql:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=tagore,kavach
    healthcheck: 
      interval: 10s
      retries: 10
      test: "pg_isready -U \"$$POSTGRES_USER\" -d \"kavach\""
      timeout: 2s      
    networks:
      - tagore

  ###########################################################################
  #######                  APP SERVICES                               #######
  ###########################################################################
  tagore-migrate:
    build:
      context: ./server
      dockerfile: Dockerfile.migrate
    depends_on: 
      postgres:
        condition: service_healthy
    environment:
      - WAIT_HOSTS=postgres:5432
    volumes:
      - ./server:/app
    networks:
      - tagore


  tagore-server:
    build: 
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./server:/app
      - ./server/modelData:/app/modelData
    depends_on: 
      - tagore-migrate
    networks:
      - tagore


  tagore-web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    environment:
      - NEXT_PUBLIC_BASE_PATH=/.factly/mande/web
      - REACT_APP_TAGORE_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - type: bind
        source: ./web
        target: /app
    restart: unless-stopped
    stdin_open: true
    networks:
      - tagore
               
networks:
  tagore: